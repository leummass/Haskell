-- En este archivo se abordará el problema a resolver y cómo se dará solución

Adivinanza de números.
En este proyecto, realizaras un juego, donde el objetivo es que el usuario adivine un número aleatorio generado por la computadora en un número limitado de intentos. El juego deberá mostrar al usuario si cada intento es más alto o bajo, y al final del juego, deberá mostrar el número de intentos y la cantidad de intentos utilizados. Utilizar un sistema de puntuaciones que serán almacenadas en un archivo el cual será actualizado y leído.

A continuación, se muestra un esquema básico de cómo será el juego:

1.Crear un pequeño menú para ver puntuaciones y jugar un nuevo juego.
2.Si genera un nuevo juego preguntar al usuario su nombre.
3.Generar un número aleatorio entre n y m utilizando la biblioteca “System.Random” de haskell. Los números n y m son ingresados por el usuario.
4.Utilizar alguna formula para calcular el número de intentos máximo (Puedes utilizar un porcentaje de la diferencia de n y m).
5.Pedir al usuario que ingrese su primer intento.
6.Verificar si el número ingresado es igual al número generado. Si es así, mostrar un mensaje de felicitaciones y terminar el juego. Si no, continuar con el siguiente paso.
7.Comparar el número ingresado con el número generado y mostrar un mensaje indicando si el número es más alto o bajo.
8.Pedir al usuario que ingrese su siguiente intento y repetir los pasos 3-4 hasta que el número correcto sea adivinado o hasta que se haya alcanzado un número máximo de intentos.
9.Si el usuario no ha adivinado el número correcto después de un número máximo de intentos, mostrar un mensaje indicando que el juego ha terminado y mostrar el número correcto.
10.Guardar la puntuación obtenida (Realizar un cálculo con respecto al número de intentos, el máximo y la diferencia del rango).

Propuesta de lo necesario a implementar en Haskell para resolver el problema:
1. Generación de un número aleatorio
    1.1 La generación del número aleatorio tiene que ser entre dos números, n y m, utilizando la biblioteca System.Random de Haskell, los números n y m los proporcionará el jugador

Implementado de la siguiente forma:

numeroAleatorio :: Int -> Int -> IO Int
numeroAleatorio n m = randomRIO(n,m)

2. Función que muestre si el número que se recibió en el intento es más alto o más bajo que el aleatorio generado en ese intento 

3. Al final, mostrar el número de intentos utilizado 

4. Almacenar puntuaciónes en un archivo que puede ser actualizado y leído

5. Menú con las siguientes opciones: Jugar, Ver puntuaciones y Salir
    5.1 Al jugar de nuevo se tiene que preguntar el nombre del jugador

6. El jugador tiene N número de intentos para adivinar el número, para calcular el número de intentos se utlizará una formula que es la siguiente:
    Si m-n<=5
        intentos = 3
    Si m-n<=30
        intentos = 5
    De lo contrario
        intentos = 10

7. Pedir el primer intento al jugador

8. Función que verifique si el número ingresado en el intento actual es igual al generado, si es igual, mostrar un mensaje de felicitaciones y terminar el juego, de lo contrario, continuar

(En caso de continuación del punto 8)
9. Repetir la pregunta de un número hasta que sea adivinado o se llegue al número máximo de intentos
    9.1 Si se llega al máximo de intentos se debe de mostrar un mensaje que indique que el juego terminó y se muestra el número que se debía de encontrar y se retorna al menú del punto 5
    9.2 Se adivine o no se adivine el número se tiene que mostrar la puntuación obtenida y se seguirá el siguiente criterio:
        -- La puntuación máxima es 100
        Para m-n>30
            Máximo de intentos sin adivinar:
                Si el número estuvo a 1 de diferencia: 30 puntos 
                Si el número estuvo a 5 o menos de diferencia: 15 puntos 
                Si el número estuvo a 10 o menos de diferencia: 
                10 puntos
                Si el número estuvo a una diferencia mayor a 10:
                0
            Si se adivina:
                100 puntos y se reducen en 2 por intento 
        Para m-n<=30
            Máximo de intentos sin adivinar:
                Si el número estuvo a 1 de diferencia: 20 puntos 
                Si el número estuvo a 5 o menos de diferencia: 10 puntos 
                Si el número estuvo a una diferencia mayor a 5:
                0
            Si se adivina:
                100 puntos y se reducen en 5 por intento 
        Para m-n<=5
            Máximo de intentos sin adivinar:
                Si el número estuvo a 1 de diferencia: 15 puntos 
                Si el número estuvo a 3 o menos de diferencia: 5 puntos 
                Si el número estuvo a una diferencia mayor a 5:
                0
            Si se adivina:
                100 puntos y se reducen en 7 por intento 


Explicación del proyecto 

Función main:
La función main (línea 7) es con la que se inicia el programa, aquí se muestran las 3 opciones que tiene el juego, se le solicitará al usuario que escriba un número dependiendo de la función que quiere, 1 para la función jugar, 2 para la función mostrarPuntuaciones y 3 para salirAdivinanza

Función jugar: 
Esta función es un bloque do, primero se solicita el nombre del jugador y lo guarda en "nombre", posteriormente se solicitan el límite inferior y el límite superior para generar el número aleatorio los cuales son guardados en n y m respectivamente, después se genera el número aleatorio con la función numeroAleatorio y se guarda en "rn" y se convierte a Int en la siguiente línea (línea 35), después se genera la cantidad de intentos en base a la diferencia entre n y m, la variable valores es una lista vacía, esta se utiliza para la función juego recursivo 

Función juegoRecursivo: 
la función juegoRecursivo recibe 5 valores, un String que es el nombre del jugador, numeroAleatorio que es el número a adivinar, intento que es el número de intento actual, intentolimit que es el limite de intentos y listanum que es donde se van guardando los valores que introduce el jugador, estos se utilizan para calcular la puntuación en caso de que el jugador no acierte 

En esta función lo que se hace primero es mostrar el número de intento, luego se le solicita al jugador que teclee un número el cual es agregado a la listanum, el la línea 48 con case lo que se hace es utilizar la función compare para verificar si el número que introdujo el jugador es igual al aleatorio (EQ), si es menor retorna LT y si es mayor retorna GT.

En el caso de que sea EQ se imprime una línea que dice "Acertaste", otra con la cantidad de intentos que le tomó, con la función calcularPuntuacion se calcula su puntuación, y por último imprime el nombre del jugador y su puntuación, después añade dicha puntuación al archivo de texto con la función anadirPuntuacion

En caso de que se reciba tanto GT o LT, se imprimirá un mensaje que diga si el número es más alto o más bajo que el aleatorio que se trata de adivinar y se repite la función juegoRecursivo mandándole el mismo nombre, el mismo número aleatorio, el intento + 1, el mismo intentolimit y la lista de numeros pero ahora con el número que se intentó

Función mostrarPuntuaciones:
Esta función solo se encarga de imprimir en pantalla los resultados previamente guardados en un archivo llamando "puntuaciones.txt"

Función salirAdivinanza:
Función encargada de ejecutar exitSuccess para terminar el programa 

-- Funciones auxiliares 

anadirPuntuacion:
Función encargada de añadir las puntuaciones al archivo de texto "puntuaciones.txt" 

calcularPuntuacion:
Esta función se recibe 5 valores y dependiendo del valor booleano que se reciba son las acciones que se tomarán después, se recibe el intento actual, el limite de intentos, el número más cercano, un booleano que indica si acertó el jugador o no y el número aleatorio generado, en el caso de que el booleando sea True, se llama la función calcAcierto y se le manda el número de intento actual y el límite de los mismos, si el valor booleano es False, se llama a la función calcFallo a la cual se le manda el límite de intentos, el número más cercano al aleatorio y el número aleatorio, 

calcAcierto: 
Se calculan los puntos dependiendo de los intentos límite y los intentos que tomó para adivinar 

calcFallo: 
Se calculan los puntos dependiendo del límtie de intentos y la diferencia entre el valor más cercano y el aleatorio

numeroAleatorio: 
Genera un número aleatorio entre dos valores previamente proporcionados

append:
Añade un número una lista 

numCercano y cercano:
Buscan el valor más cercano al aleatorio dentro de una lista
